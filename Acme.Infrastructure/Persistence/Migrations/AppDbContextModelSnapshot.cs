// <auto-generated />
using System;
using Acme.Infrastructure.Persistence.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WePrepClass.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WePrepClass.Domain.WePrepClassAggregates.Courses.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifierId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LearningModeRequirement")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TutorId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("WePrepClass.Domain.WePrepClassAggregates.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifierId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NotificationEventType")
                        .HasColumnType("int");

                    b.Property<string>("ObjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("WePrepClass.Domain.WePrepClassAggregates.Subjects.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifierId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("WePrepClass.Domain.WePrepClassAggregates.TutoringRequests.TutoringRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifierId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Message");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TutorId");

                    b.Property<int>("TutorRequestStatus")
                        .HasColumnType("int")
                        .HasColumnName("TutorRequestStatus");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TutorId");

                    b.HasIndex("UserId");

                    b.ToTable("TutoringRequest", (string)null);
                });

            modelBuilder.Entity("WePrepClass.Domain.WePrepClassAggregates.Tutors.Tutor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<int>("AcademicLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifierId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Rate")
                        .IsRequired()
                        .HasPrecision(2, 1)
                        .HasColumnType("decimal(2,1)");

                    b.Property<int>("TutorStatus")
                        .HasColumnType("int");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevel");

                    b.HasIndex("Rate");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Tutor", (string)null);
                });

            modelBuilder.Entity("WePrepClass.Domain.WePrepClassAggregates.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifierId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("WePrepClass.Domain.WePrepClassAggregates.Courses.Course", b =>
                {
                    b.HasOne("WePrepClass.Domain.WePrepClassAggregates.Subjects.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WePrepClass.Domain.WePrepClassAggregates.Tutors.Tutor", null)
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WePrepClass.Domain.WePrepClassAggregates.Users.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("DetailAddress")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DetailAddress");

                            b1.Property<string>("District")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("District");

                            b1.HasKey("CourseId");

                            b1.ToTable("Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsOne("WePrepClass.Domain.WePrepClassAggregates.Courses.ValueObjects.Fee", "ChargeFee", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ChargeFee");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ChargeFee.Currency");

                            b1.HasKey("CourseId");

                            b1.ToTable("Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsOne("WePrepClass.Domain.WePrepClassAggregates.Courses.ValueObjects.Fee", "SessionFee", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("SessionFee");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("SessionFee.Currency");

                            b1.HasKey("CourseId");

                            b1.ToTable("Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsMany("WePrepClass.Domain.WePrepClassAggregates.Courses.Entities.TeachingAssignment", "TeachingAssignments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("Id");

                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("CourseId");

                            b1.Property<DateTime>("CreationTime")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatorId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DeleterId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("DeletionTime")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("LastModificationTime")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifierId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("TeachingAssignmentStatus")
                                .HasColumnType("int")
                                .HasColumnName("TeachingAssignmentStatus");

                            b1.Property<Guid>("TutorId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("TutorId");

                            b1.HasKey("Id");

                            b1.HasIndex("CourseId");

                            b1.ToTable("TeachingAssignment", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsMany("WePrepClass.Domain.WePrepClassAggregates.Courses.Entities.TeachingRequest", "TeachingRequests", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("Id");

                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("CourseId");

                            b1.Property<DateTime>("CreationTime")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatorId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("TeachingRequest_Description");

                            b1.Property<DateTime?>("LastModificationTime")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifierId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("TeachingRequestStatus")
                                .HasColumnType("int")
                                .HasColumnName("TeachingRequestStatus");

                            b1.Property<Guid>("TutorId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("TutorId");

                            b1.HasKey("Id");

                            b1.HasIndex("CourseId");

                            b1.ToTable("TeachingRequest", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsOne("WePrepClass.Domain.WePrepClassAggregates.Courses.ValueObjects.LearnerDetail", "LearnerDetail", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ContactNumber")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("ContactNumber");

                            b1.Property<int>("LearnerGender")
                                .HasColumnType("int")
                                .HasColumnName("LearnerGender");

                            b1.Property<Guid?>("LearnerId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("LearnerId");

                            b1.Property<string>("LearnerName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("LearnerName");

                            b1.Property<int>("NumberOfLearner")
                                .HasColumnType("int")
                                .HasColumnName("NumberOfLearner");

                            b1.HasKey("CourseId");

                            b1.HasIndex("LearnerId");

                            b1.ToTable("Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");

                            b1.HasOne("WePrepClass.Domain.WePrepClassAggregates.Users.User", null)
                                .WithMany()
                                .HasForeignKey("LearnerId");
                        });

                    b.OwnsOne("WePrepClass.Domain.WePrepClassAggregates.Courses.ValueObjects.Review", "Review", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreationTime")
                                .HasColumnType("datetime2")
                                .HasColumnName("Review_CreationTime");

                            b1.Property<string>("CreatorId")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("Review_CreatorId");

                            b1.Property<string>("Detail")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("Detail");

                            b1.Property<DateTime?>("LastModificationTime")
                                .HasColumnType("datetime2")
                                .HasColumnName("Review_LastModificationTime");

                            b1.Property<string>("LastModifierId")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("Review_LastModifierId");

                            b1.Property<short>("Rate")
                                .HasPrecision(2, 1)
                                .HasColumnType("smallint")
                                .HasColumnName("Rate");

                            b1.HasKey("CourseId");

                            b1.ToTable("Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsOne("WePrepClass.Domain.WePrepClassAggregates.Courses.ValueObjects.Session", "Session", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("DurationUnit")
                                .HasColumnType("int")
                                .HasColumnName("SessionDurationUnit");

                            b1.Property<int>("SessionFrequency")
                                .HasColumnType("int")
                                .HasColumnName("SessionFrequency");

                            b1.Property<decimal>("Value")
                                .HasPrecision(2, 2)
                                .HasColumnType("decimal(2,2)")
                                .HasColumnName("SessionValue");

                            b1.HasKey("CourseId");

                            b1.ToTable("Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsOne("WePrepClass.Domain.WePrepClassAggregates.Courses.ValueObjects.TutorSpecification", "TutorSpecification", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("TutorAcademicLevel")
                                .HasColumnType("int")
                                .HasColumnName("TutorAcademicLevel");

                            b1.Property<int>("TutorGender")
                                .HasColumnType("int")
                                .HasColumnName("TutorGender");

                            b1.HasKey("CourseId");

                            b1.ToTable("Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ChargeFee")
                        .IsRequired();

                    b.Navigation("LearnerDetail")
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("Session")
                        .IsRequired();

                    b.Navigation("SessionFee")
                        .IsRequired();

                    b.Navigation("TeachingAssignments");

                    b.Navigation("TeachingRequests");

                    b.Navigation("TutorSpecification")
                        .IsRequired();
                });

            modelBuilder.Entity("WePrepClass.Domain.WePrepClassAggregates.TutoringRequests.TutoringRequest", b =>
                {
                    b.HasOne("WePrepClass.Domain.WePrepClassAggregates.Tutors.Tutor", null)
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WePrepClass.Domain.WePrepClassAggregates.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("WePrepClass.Domain.WePrepClassAggregates.Tutors.Tutor", b =>
                {
                    b.HasOne("WePrepClass.Domain.WePrepClassAggregates.Users.User", null)
                        .WithOne()
                        .HasForeignKey("WePrepClass.Domain.WePrepClassAggregates.Tutors.Tutor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("WePrepClass.Domain.WePrepClassAggregates.Tutors.Entities.Major", "Majors", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("Id");

                            b1.Property<int>("SubjectId")
                                .HasColumnType("int")
                                .HasColumnName("SubjectId");

                            b1.Property<Guid>("TutorId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("TutorId");

                            b1.HasKey("Id");

                            b1.HasIndex("SubjectId");

                            b1.HasIndex("TutorId");

                            b1.ToTable("Major", (string)null);

                            b1.HasOne("WePrepClass.Domain.WePrepClassAggregates.Subjects.Subject", null)
                                .WithMany()
                                .HasForeignKey("SubjectId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("TutorId");
                        });

                    b.OwnsMany("WePrepClass.Domain.WePrepClassAggregates.Tutors.Entities.Verification", "Verifications", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("Id");

                            b1.Property<DateTime>("CreationTime")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatorId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Image")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<DateTime?>("LastModificationTime")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifierId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("TutorId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("TutorId");

                            b1.HasKey("Id");

                            b1.HasIndex("TutorId");

                            b1.ToTable("Verification", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TutorId");
                        });

                    b.OwnsMany("WePrepClass.Domain.WePrepClassAggregates.Tutors.Entities.VerificationChange", "VerificationChanges", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("Id");

                            b1.Property<DateTime>("CreationTime")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatorId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("LastModificationTime")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifierId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("TutorId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("TutorId");

                            b1.Property<int>("VerificationChangeStatus")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("TutorId");

                            b1.ToTable("VerificationChange", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TutorId");

                            b1.OwnsMany("WePrepClass.Domain.WePrepClassAggregates.Tutors.Entities.VerificationChangeDetail", "ChangeVerificationRequestDetails", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("Id");

                                    b2.Property<string>("ImageUrl")
                                        .IsRequired()
                                        .HasMaxLength(256)
                                        .HasColumnType("nvarchar(256)");

                                    b2.Property<Guid>("VerificationChangeId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("Id");

                                    b2.HasIndex("VerificationChangeId");

                                    b2.ToTable("VerificationChangeDetail", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("VerificationChangeId");
                                });

                            b1.Navigation("ChangeVerificationRequestDetails");
                        });

                    b.Navigation("Majors");

                    b.Navigation("VerificationChanges");

                    b.Navigation("Verifications");
                });

            modelBuilder.Entity("WePrepClass.Domain.WePrepClassAggregates.Users.User", b =>
                {
                    b.OwnsOne("WePrepClass.Domain.WePrepClassAggregates.Users.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("City");

                            b1.Property<string>("DetailAddress")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("DetailAddress");

                            b1.Property<string>("District")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("District");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
